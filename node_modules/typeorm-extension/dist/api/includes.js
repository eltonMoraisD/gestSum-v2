"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyRequestIncludes = exports.applyIncludes = exports.applyIncludesTransformed = exports.transformIncludes = void 0;
var minimatch_1 = __importDefault(require("minimatch"));
var utils_1 = require("./utils");
// --------------------------------------------------
function includeParents(data, options) {
    var ret = [];
    for (var i = 0; i < data.length; i++) {
        var parts = data[i].split('.');
        var value = utils_1.changeStringCase(parts.shift(), options.stringCase);
        /* istanbul ignore next */
        if (options.aliasMapping &&
            options.aliasMapping.hasOwnProperty(value)) {
            value = options.aliasMapping[value];
        }
        if (ret.indexOf(value) === -1) {
            ret.push(value);
        }
        while (parts.length > 0) {
            var postValue = utils_1.changeStringCase(parts.shift(), options.stringCase);
            value += '.' + postValue;
            /* istanbul ignore next */
            if (options.aliasMapping &&
                options.aliasMapping.hasOwnProperty(value)) {
                value = options.aliasMapping[value];
            }
            if (ret.indexOf(value) === -1) {
                ret.push(value);
            }
        }
    }
    return ret;
}
function transformIncludes(data, options) {
    var _a, _b;
    options !== null && options !== void 0 ? options : (options = {});
    // If it is an empty array nothing is allowed
    if (Array.isArray(options.allowed) &&
        options.allowed.length === 0) {
        return [];
    }
    if (options.aliasMapping) {
        options.aliasMapping = utils_1.buildAliasMapping(options.aliasMapping, {
            keyCase: options.stringCase,
            keyDepthCharacter: '.'
        });
    }
    else {
        options.aliasMapping = {};
    }
    (_a = options.stringCase) !== null && _a !== void 0 ? _a : (options.stringCase = utils_1.getDefaultStringCase());
    (_b = options.includeParents) !== null && _b !== void 0 ? _b : (options.includeParents = true);
    var items = [];
    var prototype = Object.prototype.toString.call(data);
    if (prototype !== '[object Array]' &&
        prototype !== '[object String]') {
        return [];
    }
    if (prototype === '[object String]') {
        items = data.split(',');
    }
    if (prototype === '[object Array]') {
        items = data.filter(function (el) { return typeof el === 'string'; });
    }
    if (items.length === 0) {
        return [];
    }
    items = items
        .map(function (item) {
        item = utils_1.changeStringCase(item, options.stringCase, { depthCharacter: '.' });
        if (options.aliasMapping.hasOwnProperty(item)) {
            item = options.aliasMapping[item];
        }
        return item;
    });
    if (options.allowed) {
        items = items
            .filter(function (item) {
            for (var i = 0; i < options.allowed.length; i++) {
                if (minimatch_1.default(item, options.allowed[i])) {
                    return true;
                }
            }
            return false;
        });
    }
    if (options.includeParents) {
        if (Array.isArray(options.includeParents)) {
            var parentIncludes = items.filter(function (item) { return item.includes('.') && options.includeParents.filter(function (parent) { return minimatch_1.default(item, parent); }).length > 0; });
            items.unshift.apply(items, includeParents(parentIncludes, options));
        }
        else {
            items = includeParents(items, options);
        }
    }
    items = Array.from(new Set(items));
    return items
        .map(function (relation) {
        return {
            property: relation.includes('.') ? relation.split('.').slice(-2).join('.') : (options.queryAlias ? options.queryAlias + '.' + relation : relation),
            alias: relation.split('.').pop()
        };
    });
}
exports.transformIncludes = transformIncludes;
function applyIncludesTransformed(query, data) {
    for (var i = 0; i < data.length; i++) {
        /* istanbul ignore next */
        query.leftJoinAndSelect(data[i].property, data[i].alias);
    }
    return data;
}
exports.applyIncludesTransformed = applyIncludesTransformed;
/**
 * Apply raw include data on query.
 *
 * @param query
 * @param data
 * @param options
 */
function applyIncludes(query, data, options) {
    return applyIncludesTransformed(query, transformIncludes(data, options));
}
exports.applyIncludes = applyIncludes;
// --------------------------------------------------
/**
 * @deprecated
 * @param query
 * @param data
 * @param allowed
 * @param options
 */
function applyRequestIncludes(query, data, allowed, options) {
    return applyIncludes(query, data, __assign(__assign({}, options), { allowed: allowed }));
}
exports.applyRequestIncludes = applyRequestIncludes;
//# sourceMappingURL=includes.js.map