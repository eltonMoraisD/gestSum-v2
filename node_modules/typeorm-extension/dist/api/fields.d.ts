import { SelectQueryBuilder } from "typeorm";
import { IncludesTransformed } from "./includes";
import { StringCaseVariant } from "./utils";
export declare const DEFAULT_ALIAS_ID: string;
export declare type FieldsOptions = {
    aliasMapping?: Record<string, string>;
    allowed?: Record<string, string[]> | string[];
    includes?: IncludesTransformed;
    queryAlias?: string;
    /**
     * @deprecated
     */
    stringCase?: StringCaseVariant | undefined;
};
export declare type FieldsTransformed = Record<string, string[]>;
export declare function buildDomainFields(data: Record<string, string[]> | string[], options?: FieldsOptions): Record<string, string[]>;
export declare function transformFields(data: unknown, options: FieldsOptions): FieldsTransformed;
export declare function applyFieldsTransformed<T>(query: SelectQueryBuilder<T>, data: FieldsTransformed): FieldsTransformed;
/**
 * Apply raw field data on query.
 *
 * @param query
 * @param data
 * @param options
 */
export declare function applyFields<T>(query: SelectQueryBuilder<T>, data: unknown, options?: FieldsOptions): FieldsTransformed;
/**
 * @deprecated
 * @param query
 * @param data
 * @param allowed
 * @param options
 */
export declare function applyRequestFields(query: SelectQueryBuilder<any>, data: unknown, allowed: Record<string, string[]> | string[], options?: FieldsOptions): FieldsTransformed;
