import { SelectQueryBuilder } from "typeorm";
import { IncludesTransformed } from "./includes";
import { StringCaseVariant } from "./utils";
export declare type FiltersOptions = {
    aliasMapping?: Record<string, string>;
    allowed?: string[];
    includes?: IncludesTransformed;
    queryAlias?: string;
    /**
     * @deprecated
     */
    stringCase?: StringCaseVariant;
};
export declare type FilterTransformed = {
    type: 'where' | 'andWhere';
    query: string;
    bindings: Record<string, any>;
};
export declare type FiltersTransformed = FilterTransformed[];
export declare function transformFilters(data: unknown, options?: FiltersOptions): FiltersTransformed;
export declare function applyFiltersTransformed<T>(query: SelectQueryBuilder<T>, data: FiltersTransformed): FiltersTransformed;
/**
 * Apply raw filter data on query.
 *
 * @param query
 * @param data
 * @param options
 */
export declare function applyFilters<T>(query: SelectQueryBuilder<T>, data: unknown, options?: FiltersOptions): FiltersTransformed;
/**
 * @deprecated
 */
export declare function applyRequestFilter(query: SelectQueryBuilder<any> | undefined, data: unknown, aliasMapping: Record<string, string>, options?: FiltersOptions): FiltersTransformed;
/**
 * @deprecated
 * @param query
 * @param data
 * @param aliasMapping
 * @param options
 */
export declare function applyRequestFilters(query: SelectQueryBuilder<any> | undefined, data: unknown, aliasMapping: Record<string, string>, options?: Partial<FiltersOptions>): FiltersTransformed;
