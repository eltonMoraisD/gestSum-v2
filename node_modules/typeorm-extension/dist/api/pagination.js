"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyRequestPagination = exports.applyPagination = exports.applyPaginationTransformed = exports.transformPagination = void 0;
// --------------------------------------------------
function finalizePagination(data, options) {
    if (typeof options.maxLimit !== 'undefined') {
        if (typeof data.limit === 'undefined' ||
            data.limit > options.maxLimit) {
            data.limit = options.maxLimit;
        }
    }
    if (typeof data.limit !== 'undefined' &&
        typeof data.offset === 'undefined') {
        data.offset = 0;
    }
    return data;
}
/**
 * Transform pagination data to an appreciate data format.
 *
 * @param data
 * @param options
 */
function transformPagination(data, options) {
    options !== null && options !== void 0 ? options : (options = {});
    var pagination = {};
    var prototype = Object.prototype.toString.call(data);
    if (prototype !== '[object Object]') {
        return finalizePagination(pagination, options);
    }
    var _a = data, limit = _a.limit, offset = _a.offset;
    if (typeof limit !== 'undefined') {
        // tslint:disable-next-line:radix
        limit = parseInt(limit);
        if (!Number.isNaN(limit) && limit > 0) {
            pagination.limit = limit;
        }
    }
    if (typeof offset !== 'undefined') {
        // tslint:disable-next-line:radix
        offset = parseInt(offset);
        if (!Number.isNaN(offset) && offset >= 0) {
            pagination.offset = offset;
        }
    }
    return finalizePagination(pagination, options);
}
exports.transformPagination = transformPagination;
function applyPaginationTransformed(query, data) {
    /* istanbul ignore next */
    if (typeof data.limit !== 'undefined') {
        query.take(data.limit);
        if (typeof data.offset === 'undefined') {
            query.skip(0);
        }
    }
    /* istanbul ignore next */
    if (typeof data.offset !== 'undefined') {
        query.skip(data.offset);
    }
    return data;
}
exports.applyPaginationTransformed = applyPaginationTransformed;
function applyPagination(query, data, options) {
    return applyPaginationTransformed(query, transformPagination(data, options));
}
exports.applyPagination = applyPagination;
/**
 * Apply pagination raw data on query.
 *
 * @deprecated
 * @param query
 * @param data
 * @param maxLimit
 */
function applyRequestPagination(query, data, maxLimit) {
    return applyPagination(query, transformPagination(data, { maxLimit: maxLimit }));
}
exports.applyRequestPagination = applyRequestPagination;
//# sourceMappingURL=pagination.js.map