"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applySort = exports.applySortTransformed = exports.transformSort = void 0;
var utils_1 = require("./utils");
var utils_2 = require("./utils");
var field_1 = require("./utils/field");
// --------------------------------------------------
function isMultiDimensionalArray(arr) {
    if (!Array.isArray(arr)) {
        return false;
    }
    return arr.length > 0 && Array.isArray(arr[0]);
}
/**
 * Transform sort data to appreciate data format.
 * @param data
 * @param options
 */
function transformSort(data, options) {
    var _a;
    options = options !== null && options !== void 0 ? options : {};
    // If it is an empty array nothing is allowed
    if (Array.isArray(options.allowed) &&
        options.allowed.length === 0) {
        return {};
    }
    options.aliasMapping = options.aliasMapping ? utils_1.buildAliasMapping(options.aliasMapping) : {};
    options.stringCase = (_a = options.stringCase) !== null && _a !== void 0 ? _a : utils_2.getDefaultStringCase();
    var items = {};
    var prototype = Object.prototype.toString.call(data);
    /* istanbul ignore next */
    if (prototype !== '[object String]' &&
        prototype !== '[object Array]' &&
        prototype !== '[object Object]') {
        return items;
    }
    var parts = [];
    if (prototype === '[object String]') {
        parts = data.split(',');
    }
    if (prototype === '[object Array]') {
        parts = data.filter(function (item) { return typeof item === 'string'; });
    }
    if (prototype === '[object Object]') {
        var ob = data;
        for (var key in ob) {
            /* istanbul ignore next */
            if (!ob.hasOwnProperty(key) ||
                typeof key !== 'string' ||
                typeof ob[key] !== 'string')
                continue;
            var fieldPrefix = ob[key].toLowerCase() === 'desc' ? '-' : '';
            parts.push(fieldPrefix + key);
        }
    }
    for (var i = 0; i < parts.length; i++) {
        var direction = 'ASC';
        if (parts[i].substr(0, 1) === '-') {
            direction = 'DESC';
            parts[i] = parts[i].substr(1);
        }
        var key = utils_2.changeStringCase(parts[i], options.stringCase, { depthCharacter: '.' });
        if (options.aliasMapping.hasOwnProperty(key)) {
            key = options.aliasMapping[key];
        }
        var fieldDetails = field_1.getFieldDetails(key);
        if (!utils_1.isFieldAllowedByIncludes(fieldDetails, options.includes, { queryAlias: options.queryAlias })) {
            continue;
        }
        var keyWithQueryAlias = utils_1.buildFieldWithQueryAlias(fieldDetails, options.queryAlias);
        if (typeof options.allowed !== 'undefined' &&
            !isMultiDimensionalArray(options.allowed) &&
            options.allowed.indexOf(key) === -1 &&
            options.allowed.indexOf(keyWithQueryAlias) === -1) {
            continue;
        }
        items[keyWithQueryAlias] = direction;
    }
    if (isMultiDimensionalArray(options.allowed)) {
        outerLoop: for (var i = 0; i < options.allowed.length; i++) {
            var temp = {};
            for (var j = 0; j < options.allowed[i].length; j++) {
                var keyWithAlias = options.allowed[i][j];
                var key = keyWithAlias.includes('.') ? keyWithAlias.split('.').pop() : keyWithAlias;
                if (items.hasOwnProperty(key) || items.hasOwnProperty(keyWithAlias)) {
                    temp[keyWithAlias] = items.hasOwnProperty(key) ? items[key] : items[keyWithAlias];
                }
                else {
                    continue outerLoop;
                }
            }
            return temp;
        }
        // if we get no match, the sort data is invalid.
        return {};
    }
    return items;
}
exports.transformSort = transformSort;
function applySortTransformed(query, sort) {
    return query.orderBy(sort);
}
exports.applySortTransformed = applySortTransformed;
/**
 * Apply raw sort data on query.
 *
 * @param query
 * @param data
 * @param options
 */
function applySort(query, data, options) {
    return applySortTransformed(query, transformSort(data, options));
}
exports.applySort = applySort;
//# sourceMappingURL=sort.js.map