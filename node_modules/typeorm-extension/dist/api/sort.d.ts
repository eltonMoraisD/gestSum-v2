import { SelectQueryBuilder } from "typeorm";
import { IncludesTransformed } from "./includes";
import { StringCaseVariant } from "./utils";
export declare type SortOptions = {
    aliasMapping?: Record<string, string>;
    allowed?: string[] | string[][];
    includes?: IncludesTransformed;
    queryAlias?: string;
    /**
     * @deprecated
     */
    stringCase?: StringCaseVariant;
};
export declare type SortDirection = 'ASC' | 'DESC';
export declare type SortTransformed = Record<string, SortDirection>;
/**
 * Transform sort data to appreciate data format.
 * @param data
 * @param options
 */
export declare function transformSort(data: unknown, options?: SortOptions): SortTransformed;
export declare function applySortTransformed<T>(query: SelectQueryBuilder<T>, sort: SortTransformed): SelectQueryBuilder<T>;
/**
 * Apply raw sort data on query.
 *
 * @param query
 * @param data
 * @param options
 */
export declare function applySort<T>(query: SelectQueryBuilder<T>, data: unknown, options?: SortOptions): SelectQueryBuilder<T>;
