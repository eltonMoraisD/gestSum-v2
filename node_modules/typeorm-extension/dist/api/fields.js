"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyRequestFields = exports.applyFields = exports.applyFieldsTransformed = exports.transformFields = exports.buildDomainFields = exports.DEFAULT_ALIAS_ID = void 0;
var utils_1 = require("../utils");
var utils_2 = require("./utils");
// --------------------------------------------------
exports.DEFAULT_ALIAS_ID = '__DEFAULT__';
// --------------------------------------------------
function buildDomainFields(data, options) {
    options = options !== null && options !== void 0 ? options : { queryAlias: exports.DEFAULT_ALIAS_ID };
    var domainFields = {};
    if (Array.isArray(data)) {
        domainFields[options.queryAlias] = data;
    }
    else {
        domainFields = data;
    }
    return domainFields;
}
exports.buildDomainFields = buildDomainFields;
function transformFields(data, options) {
    var _a, _b;
    var _c, _d, _e, _f;
    options !== null && options !== void 0 ? options : (options = {});
    // If it is an empty array nothing is allowed
    if (typeof options.allowed !== 'undefined' &&
        Object.keys(options.allowed).length === 0) {
        return {};
    }
    (_c = options.aliasMapping) !== null && _c !== void 0 ? _c : (options.aliasMapping = {});
    (_d = options.includes) !== null && _d !== void 0 ? _d : (options.includes = []);
    (_e = options.queryAlias) !== null && _e !== void 0 ? _e : (options.queryAlias = exports.DEFAULT_ALIAS_ID);
    (_f = options.stringCase) !== null && _f !== void 0 ? _f : (options.stringCase = utils_2.getDefaultStringCase());
    var allowedDomainFields;
    if (options.allowed) {
        allowedDomainFields = buildDomainFields(options.allowed, options);
    }
    var prototype = Object.prototype.toString.call(data);
    if (prototype !== '[object Object]' &&
        prototype !== '[object Array]' &&
        prototype !== '[object String]') {
        return {};
    }
    if (prototype === '[object String]') {
        data = (_a = {}, _a[options.queryAlias] = data.split(','), _a);
    }
    if (prototype === '[object Array]') {
        data = (_b = {}, _b[options.queryAlias] = data, _b);
    }
    var domainFields = {};
    var _loop_1 = function (key) {
        if (!data.hasOwnProperty(key)) {
            return "continue";
        }
        var value = data[key];
        var valuePrototype = Object.prototype.toString.call(value);
        if (valuePrototype !== '[object Array]' &&
            valuePrototype !== '[object String]') {
            return "continue";
        }
        var fields = [];
        /* istanbul ignore next */
        if (valuePrototype === '[object String]') {
            fields = value.split(',');
        }
        /* istanbul ignore next */
        if (valuePrototype === '[object Array]') {
            fields = value.filter(function (val) { return typeof val === 'string'; });
        }
        var allowedDomains = typeof allowedDomainFields !== 'undefined' ? Object.keys(allowedDomainFields) : [];
        var targetKey = allowedDomains.length === 1 ? allowedDomains[0] : key;
        // is not default domain && includes are defined?
        if (key !== exports.DEFAULT_ALIAS_ID &&
            key !== options.queryAlias &&
            typeof options.includes !== 'undefined') {
            var includesMatched = options.includes.filter(function (include) { return include.alias === key; });
            if (includesMatched.length === 0) {
                return "continue";
            }
        }
        fields = fields
            .map(function (part) {
            part = utils_2.changeStringCase(part, options.stringCase);
            var fullKey = key + '.' + part;
            return options.aliasMapping.hasOwnProperty(fullKey) ? options.aliasMapping[fullKey].split('.').pop() : part;
        })
            .filter(function (part) {
            if (typeof allowedDomainFields === 'undefined') {
                return true;
            }
            return utils_1.hasOwnProperty(allowedDomainFields, targetKey) &&
                allowedDomainFields[targetKey].indexOf(part) !== -1;
        });
        if (fields.length > 0) {
            domainFields[targetKey] = fields;
        }
    };
    for (var key in data) {
        _loop_1(key);
    }
    return domainFields;
}
exports.transformFields = transformFields;
function applyFieldsTransformed(query, data) {
    var _loop_2 = function (key) {
        /* istanbul ignore next */
        if (!data.hasOwnProperty(key))
            return "continue";
        /* istanbul ignore next */
        var prefix = key === exports.DEFAULT_ALIAS_ID ? '' : key + '.';
        /* istanbul ignore next */
        data[key].map(function (item) { return query.addSelect(prefix + item); });
    };
    for (var key in data) {
        _loop_2(key);
    }
    return data;
}
exports.applyFieldsTransformed = applyFieldsTransformed;
/**
 * Apply raw field data on query.
 *
 * @param query
 * @param data
 * @param options
 */
function applyFields(query, data, options) {
    return applyFieldsTransformed(query, transformFields(data, options));
}
exports.applyFields = applyFields;
// --------------------------------------------------
/**
 * @deprecated
 * @param query
 * @param data
 * @param allowed
 * @param options
 */
function applyRequestFields(query, data, allowed, options) {
    return applyFields(query, data, __assign(__assign({}, options), { allowed: allowed }));
}
exports.applyRequestFields = applyRequestFields;
//# sourceMappingURL=fields.js.map