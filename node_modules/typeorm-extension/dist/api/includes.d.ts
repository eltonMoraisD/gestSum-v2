import { SelectQueryBuilder } from "typeorm";
import { StringCaseVariant } from "./utils";
export declare type IncludeTransformed = {
    property: string;
    alias: string;
};
export declare type IncludesTransformed = IncludeTransformed[];
export declare type IncludesOptions = {
    aliasMapping?: Record<string, string>;
    allowed?: string[];
    queryAlias?: string;
    /**
     * @deprecated
     */
    stringCase?: StringCaseVariant;
    includeParents?: boolean | string[] | string;
};
export declare function transformIncludes(data: unknown, options?: IncludesOptions): IncludesTransformed;
export declare function applyIncludesTransformed<T>(query: SelectQueryBuilder<T>, data: IncludesTransformed): IncludesTransformed;
/**
 * Apply raw include data on query.
 *
 * @param query
 * @param data
 * @param options
 */
export declare function applyIncludes<T>(query: SelectQueryBuilder<T>, data: unknown, options?: IncludesOptions): IncludesTransformed;
/**
 * @deprecated
 * @param query
 * @param data
 * @param allowed
 * @param options
 */
export declare function applyRequestIncludes(query: SelectQueryBuilder<any>, data: unknown, allowed: string[], options?: IncludesOptions): IncludesTransformed;
