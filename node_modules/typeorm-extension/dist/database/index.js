"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extendCustomOptions = exports.dropDatabase = exports.createDatabase = void 0;
var DriverFactory_1 = require("typeorm/driver/DriverFactory");
var MysqlDriver_1 = require("typeorm/driver/mysql/MysqlDriver");
var SqliteDriver_1 = require("typeorm/driver/sqlite/SqliteDriver");
var PostgresDriver_1 = require("typeorm/driver/postgres/PostgresDriver");
var OracleDriver_1 = require("typeorm/driver/oracle/OracleDriver");
var SqlServerDriver_1 = require("typeorm/driver/sqlserver/SqlServerDriver");
var mysql_1 = require("./driver/mysql");
var postgres_1 = require("./driver/postgres");
var oracle_1 = require("./driver/oracle");
var mssql_1 = require("./driver/mssql");
var connection_1 = require("../connection");
var utils_1 = require("../connection/utils");
var sqlite_1 = require("./driver/sqlite");
var error_1 = require("./error");
var CockroachDriver_1 = require("typeorm/driver/cockroachdb/CockroachDriver");
var cockroachdb_1 = require("./driver/cockroachdb");
__exportStar(require("./error"), exports);
__exportStar(require("./type"), exports);
/**
 * Create database for specified driver in ConnectionOptions.
 *
 * @throws NotSupportedDriver
 *
 * @param connectionOptions
 * @param options
 */
function createDatabase(options, connectionOptions) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, createOrDropDatabase('create', options, connectionOptions)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.createDatabase = createDatabase;
/**
 * Drop database for specified driver in ConnectionOptions.
 *
 * @throws NotSupportedDriver
 *
 * @param connectionOptions
 * @param options
 */
function dropDatabase(options, connectionOptions) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, createOrDropDatabase('drop', options, connectionOptions)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.dropDatabase = dropDatabase;
function createOrDropDatabase(action, options, connectionOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var fakeConnection, driverFactory, driver, isCreateOperation, simpleConnectionOptions, customOptions;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(typeof connectionOptions === 'undefined')) return [3 /*break*/, 2];
                    return [4 /*yield*/, connection_1.buildConnectionOptions()];
                case 1:
                    connectionOptions = _a.sent();
                    _a.label = 2;
                case 2:
                    fakeConnection = {
                        options: {
                            type: connectionOptions.type
                        }
                    };
                    driverFactory = new DriverFactory_1.DriverFactory();
                    driver = driverFactory.create(fakeConnection);
                    isCreateOperation = action === 'create';
                    simpleConnectionOptions = utils_1.buildSimpleConnectionOptions(connectionOptions);
                    options = options !== null && options !== void 0 ? options : {};
                    customOptions = extendCustomOptions(options, connectionOptions);
                    if (!(driver instanceof SqliteDriver_1.SqliteDriver)) return [3 /*break*/, 6];
                    if (!isCreateOperation) return [3 /*break*/, 4];
                    return [4 /*yield*/, sqlite_1.createSQLiteDatabase(driver, simpleConnectionOptions, customOptions)];
                case 3: return [2 /*return*/, _a.sent()];
                case 4: return [4 /*yield*/, sqlite_1.dropSQLiteDatabase(driver, simpleConnectionOptions, customOptions)];
                case 5: return [2 /*return*/, _a.sent()];
                case 6:
                    if (!(driver instanceof MysqlDriver_1.MysqlDriver)) return [3 /*break*/, 10];
                    if (!isCreateOperation) return [3 /*break*/, 8];
                    return [4 /*yield*/, mysql_1.createMySQLDatabase(driver, simpleConnectionOptions, customOptions)];
                case 7: return [2 /*return*/, _a.sent()];
                case 8: return [4 /*yield*/, mysql_1.dropMySQLDatabase(driver, simpleConnectionOptions, customOptions)];
                case 9: return [2 /*return*/, _a.sent()];
                case 10:
                    if (!(driver instanceof PostgresDriver_1.PostgresDriver)) return [3 /*break*/, 14];
                    if (!isCreateOperation) return [3 /*break*/, 12];
                    return [4 /*yield*/, postgres_1.createPostgresDatabase(driver, simpleConnectionOptions, customOptions)];
                case 11: return [2 /*return*/, _a.sent()];
                case 12: return [4 /*yield*/, postgres_1.dropPostgresDatabase(driver, simpleConnectionOptions, customOptions)];
                case 13: return [2 /*return*/, _a.sent()];
                case 14:
                    if (!(driver instanceof CockroachDriver_1.CockroachDriver)) return [3 /*break*/, 18];
                    if (!isCreateOperation) return [3 /*break*/, 16];
                    return [4 /*yield*/, cockroachdb_1.createCockroachDBDatabase(driver, simpleConnectionOptions, customOptions)];
                case 15: return [2 /*return*/, _a.sent()];
                case 16: return [4 /*yield*/, cockroachdb_1.dropCockroachDBDatabase(driver, simpleConnectionOptions, customOptions)];
                case 17: return [2 /*return*/, _a.sent()];
                case 18:
                    if (!(driver instanceof OracleDriver_1.OracleDriver)) return [3 /*break*/, 22];
                    if (!isCreateOperation) return [3 /*break*/, 20];
                    return [4 /*yield*/, oracle_1.createOracleDatabase(driver, simpleConnectionOptions, customOptions)];
                case 19: return [2 /*return*/, _a.sent()];
                case 20: return [4 /*yield*/, oracle_1.dropOracleDatabase(driver, simpleConnectionOptions, customOptions)];
                case 21: return [2 /*return*/, _a.sent()];
                case 22:
                    if (!(driver instanceof SqlServerDriver_1.SqlServerDriver)) return [3 /*break*/, 26];
                    if (!isCreateOperation) return [3 /*break*/, 24];
                    return [4 /*yield*/, mssql_1.createMsSQLDatabase(driver, simpleConnectionOptions, customOptions)];
                case 23: return [2 /*return*/, _a.sent()];
                case 24: return [4 /*yield*/, mssql_1.dropMsSQLDatabase(driver, simpleConnectionOptions, customOptions)];
                case 25: return [2 /*return*/, _a.sent()];
                case 26: throw new error_1.NotSupportedDriver(connectionOptions.type);
            }
        });
    });
}
function extendCustomOptions(options, connectionOptions) {
    var _a, _b;
    if (typeof (connectionOptions === null || connectionOptions === void 0 ? void 0 : connectionOptions.charset) === 'string') {
        options.charset = connectionOptions.charset;
    }
    if (typeof (connectionOptions === null || connectionOptions === void 0 ? void 0 : connectionOptions.characterSet) === 'string') {
        options.characterSet = connectionOptions.characterSet;
    }
    if (typeof ((_a = connectionOptions === null || connectionOptions === void 0 ? void 0 : connectionOptions.extra) === null || _a === void 0 ? void 0 : _a.charset) === 'string') {
        options.charset = connectionOptions.extra.charset;
    }
    if (typeof ((_b = connectionOptions === null || connectionOptions === void 0 ? void 0 : connectionOptions.extra) === null || _b === void 0 ? void 0 : _b.characterSet) === 'string') {
        options.characterSet = connectionOptions.extra.characterSet;
    }
    return options;
}
exports.extendCustomOptions = extendCustomOptions;
//# sourceMappingURL=index.js.map