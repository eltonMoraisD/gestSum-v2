"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modifyConnectionOptionsForRuntimeEnvironment = exports.modifyConnectionOptionForRuntimeEnvironment = exports.buildSimpleConnectionOptions = void 0;
var DriverUtils_1 = require("typeorm/driver/DriverUtils");
var utils_1 = require("../utils");
var path_1 = __importDefault(require("path"));
/* istanbul ignore next */
function buildSimpleConnectionOptions(connectionOptions) {
    var driverOptions = {};
    switch (connectionOptions.type) {
        case "mysql":
        case "mariadb":
        case "postgres":
        case "cockroachdb":
        case "mssql":
        case "oracle":
            driverOptions = DriverUtils_1.DriverUtils.buildDriverOptions(connectionOptions.replication ? connectionOptions.replication.master : connectionOptions);
            break;
        case "mongodb":
            driverOptions = DriverUtils_1.DriverUtils.buildMongoDBDriverOptions(connectionOptions);
            break;
        default:
            driverOptions = DriverUtils_1.DriverUtils.buildDriverOptions(connectionOptions);
    }
    return {
        host: driverOptions.host,
        user: driverOptions.user || driverOptions.username,
        password: driverOptions.password,
        database: driverOptions.database,
        port: driverOptions.port,
        ssl: driverOptions.ssl,
        url: driverOptions.url
    };
}
exports.buildSimpleConnectionOptions = buildSimpleConnectionOptions;
function modifyConnectionOptionForRuntimeEnvironment(options, key, compilerOptions) {
    var _a;
    if (!utils_1.hasOwnProperty(options, key)) {
        return options;
    }
    compilerOptions = compilerOptions !== null && compilerOptions !== void 0 ? compilerOptions : {};
    var value = options[key];
    switch (key) {
        case "entities":
        case "subscribers":
        case "seeds":
        case "factories":
            var isTsNodeEnv = utils_1.isTsNodeRuntimeEnvironment();
            if (!isTsNodeEnv) {
                var srcDir = 'src';
                if (typeof compilerOptions.srcDirectory === 'string') {
                    srcDir = compilerOptions.srcDirectory.split(path_1.default.sep)[0];
                }
                var outDir = 'dist';
                if (typeof compilerOptions.distDirectory === 'string') {
                    outDir = compilerOptions.distDirectory;
                }
                if (Array.isArray(value)) {
                    for (var i = 0; i < value.length; i++) {
                        var str = value[i];
                        // won't happen in ts env
                        /* istanbul ignore next */
                        if (typeof str !== 'string') {
                            continue;
                        }
                        value[i] = str
                            .replace(srcDir, outDir)
                            .replace('.ts', '.js');
                    }
                }
                else {
                    if (typeof value === 'string') {
                        value = value.replace(srcDir, outDir)
                            .replace('.ts', '.js');
                    }
                }
            }
            break;
    }
    return __assign(__assign({}, options), (_a = {}, _a[key] = value, _a));
}
exports.modifyConnectionOptionForRuntimeEnvironment = modifyConnectionOptionForRuntimeEnvironment;
function modifyConnectionOptionsForRuntimeEnvironment(connectionOptions, compilerOptions) {
    var keys = [
        'entities',
        'subscribers',
        'seeds',
        'factories'
    ];
    for (var i = 0; i < keys.length; i++) {
        connectionOptions = modifyConnectionOptionForRuntimeEnvironment(connectionOptions, keys[i], compilerOptions);
    }
    return connectionOptions;
}
exports.modifyConnectionOptionsForRuntimeEnvironment = modifyConnectionOptionsForRuntimeEnvironment;
//# sourceMappingURL=utils.js.map